
代码一：(目前还有问题)
import hashlib as hasher
import datetime as date
import json
from flask import Flask
from flask import request

class Block:
  def __init__(self, index, timestamp, data, previous_hash):
    self.index = index
    self.timestamp = timestamp
    self.data = data
    self.previous_hash = previous_hash
    self.hash = self.hash_block()

  def hash_block(self):
    sha = hasher.sha256()
    sha.update(str(self.index).encode('utf-8') +
               str(self.timestamp).encode('utf-8') +
               str(self.data).encode('utf-8') +
               str(self.previous_hash).encode('utf-8'))
    return sha.hexdigest()

def create_genesis_block():
  # Manually construct a block with index zero and arbitrary previcous hash
  return Block(0, date.datetime.now(), "Genesis_Block", "0")

def next_block(last_block):
  this_index = last_block.index + 1
  this_timestamp = date.datetime.now()
  this_data = "Hey!I'm Block" + str(this_index)
  this_hash = last_block.hash
  return Block(this_index, this_timestamp, this_data, this_hash)

#  Create the blockchain and add the genesis block
blockchain = [create_genesis_block()]
previous_block = blockchain[0]

# How many blocks should we add to the chain after the genesis block
num_of_blocks_to_add = 20

# Add blocks to the chain
for i in range(0, num_of_blocks_to_add):
  block_to_add = next_block(previous_block)
  blockchain.append(block_to_add)
  previous_block = block_to_add
  # Tell everyone about it!
  print("Block #{} has been added to the blockchain!".format(block_to_add.index))
  print("Hash: {}\n".format(block_to_add.hash))

node = Flask(__name__)
# Store the transactions that this node has in a list
this_nodes_transactions = []
@node.route('/txion', methods = ['POST'])
def transaction():
  if request.method == 'POST':
    # On each new POST request,we extract the transactions data
    new_txion = request.get_json()
    # Then we add the transactions to our list
    this_nodes_transactions.append(new_txion)
    # Because the transaction was successfully submmited, we log it to our console
    print("New Transaction")
    print("FROM: {}".format(new_txion['from']))
    print("TO: {}".format(new_txion['to']))
    print("AMOUNT: {}\n".format(new_txion['amount']))
    # Then we let the client know it worked out
    return "Transaction submission successful\n"
node.run()


# ...blockchain
# ...Block class definition
miner_address = "q3nf394hjg-random-miner-address-34nf3i4nflkn3oi"
def proof_of_work(last_proof):
    # Create a variable that we will use to find our next proof to work
    incrementor = last_proof + 1
    # keep incrementing the incrementor until it's equal to a number divisible by 9 and the proof of
    # work of the previous block in the chain
    while not(incrementor % 9 == 0 and incrementor % last_proof == 0):
        incrementor += 1
    # Once that number is found, we can return it as a proof of our work
    return incrementor

@node.route('/mine', methods=['GET'])
def mine():
    # Get the last proof of work
    last_block = blockchain[len(blockchain) - 1]
    last_proof = last_block.data['proof-of-work']
    # Find the proof of work for the current block being mined
    # Noted: The program will hang here until a new proof of work is found
    proof = proof_of_work(last_proof)
    # Once we find a valid proof of work,we know we can mine a block so we reward the miner by adding a transaction
    this_nodes_transactions.append(
        {"from": "network", "to": miner_address, "amount": 1}
    )
    # Now we can gather the data needed to create the new block
    new_block_data = {
        "proof-of-work": proof,
        "transactions": list(this_nodes_transactions)
    }
    new_block_index = last_block.index + 1
    new_block_timestamp = this_timestamp = date.datetime.now()
    last_block_hash = last_block.hash
    # Empty transaction list
    this_nodes_transactions[:] = []
    # Now create the new block!
    mined_block =Block(
        new_block_index,
        new_block_timestamp,
        new_block_data,
        last_block_hash,
    )
    blockchain.append(mined_block)
    # Let the client know we mined a block
    return json.dumps({
        "index": new_block_index,
        "timestamp": new_block_timestamp,
        "data": new_block_data,
        "hash": last_block_hash
    }) + "\n"

@node.route('/blocks', methods=['GET'])
def get_blocks():
    chain_to_send = blockchain
    # Convert our blocks into dictionaries
    # so we can send them as json objects later
    for block in chain_to_send:
      block_index = str(block.index)
      block_timestamp = str(block.timestamp)
      block_data = str(block.data)
      block_hash = block.hash
      block = {
        "index": block_index,
        "timestamp": block_timestamp,
        "data": block_data,
        "hash": block_hash
      }
    # Send our chain to whomever requested it
    chain_to_send = json.dumps(chain_to_send)
    return chain_to_send
def find_new_chains():
    # Get the blockchains of every
    # other node
    other_chains = []
    for node_url in peer_nodes:
      # Get their chains using a GET request
      block = requests.get(node_url + "/blocks").content
      # Convert the JSON object to a Python dictionary
      block = json.loads(block)
      # Add it to our list
      other_chains.append(block)
    return other_chains
def consensus():
    # Get the blocks from other nodes
    other_chains = find_new_chains()
    # If our chain isn't longest,
    # then we store the longest chain
    longest_chain = blockchain
    for chain in other_chains:
      if len(longest_chain) < len(chain):
        longest_chain = chain
    # If the longest chain wasn't ours,
    # then we set our chain to the longest
    blockchain = longest_chain







代码二：（完整代码）

 import hashlib
 import json
 from time import time
 from typing import Any, Dict, List, Optional
 from urllib.parse import urlparse
 from uuid import uuid4
 
 import requests
 from flask import Flask, jsonify, request
 
 
 class Blockchain:
     def __init__(self):
         self.current_transactions = []
         self.chain = []
         self.nodes = set()
 
         # 创建创世块
         self.new_block(previous_hash='1', proof=100)
 
     def register_node(self, address: str) -> None:
         """
         Add a new node to the list of nodes
 
         :param address: Address of node. Eg. 'http://192.168.0.5:5000'
         """
 
         parsed_url = urlparse(address)
         self.nodes.add(parsed_url.netloc)
 
     def valid_chain(self, chain: List[Dict[str, Any]]) -> bool:
         """
         Determine if a given blockchain is valid
 
         :param chain: A blockchain
         :return: True if valid, False if not
         """
 
         last_block = chain[0]
         current_index = 1
 
         while current_index < len(chain):
             block = chain[current_index]
             print(f'{last_block}')
             print(f'{block}')
             print("\n-----------\n")
             # Check that the hash of the block is correct
             if block['previous_hash'] != self.hash(last_block):
                 return False
 
             # Check that the Proof of Work is correct
             if not self.valid_proof(last_block['proof'], block['proof']):
                 return False
 
             last_block = block
             current_index += 1
 
         return True
 
     def resolve_conflicts(self) -> bool:
         """
         共识算法解决冲突
         使用网络中最长的链.
 
-        :return: True 如果链被取代, False if not
+        :return:  如果链被取代返回 True, 否则为False
         """
 
         neighbours = self.nodes
         new_chain = None
 
         # We're only looking for chains longer than ours
         max_length = len(self.chain)
 
         # Grab and verify the chains from all the nodes in our network
         for node in neighbours:
             response = requests.get(f'http://{node}/chain')
 
             if response.status_code == 200:
                 length = response.json()['length']
                 chain = response.json()['chain']
 
                 # Check if the length is longer and the chain is valid
                 if length > max_length and self.valid_chain(chain):
                     max_length = length
                     new_chain = chain
 
         # Replace our chain if we discovered a new, valid chain longer than ours
         if new_chain:
             self.chain = new_chain
             return True
 
         return False
 
     def new_block(self, proof: int, previous_hash: Optional[str]) -> Dict[str, Any]:
         """
-        Create a new Block in the Blockchain
+        生成新块
 
         :param proof: The proof given by the Proof of Work algorithm
         :param previous_hash: Hash of previous Block
         :return: New Block
         """
 
         block = {
             'index': len(self.chain) + 1,
             'timestamp': time(),
             'transactions': self.current_transactions,
             'proof': proof,
             'previous_hash': previous_hash or self.hash(self.chain[-1]),
         }
 
         # Reset the current list of transactions
         self.current_transactions = []
 
         self.chain.append(block)
         return block
 
     def new_transaction(self, sender: str, recipient: str, amount: int) -> int:
         """
-        Creates a new transaction to go into the next mined Block
+        生成新交易信息，信息将加入到下一个待挖的区块中
 
         :param sender: Address of the Sender
         :param recipient: Address of the Recipient
         :param amount: Amount
         :return: The index of the Block that will hold this transaction
         """
         self.current_transactions.append({
             'sender': sender,
             'recipient': recipient,
             'amount': amount,
         })
 
         return self.last_block['index'] + 1
 
     @property
     def last_block(self) -> Dict[str, Any]:
         return self.chain[-1]
 
     @staticmethod
     def hash(block: Dict[str, Any]) -> str:
         """
         生成块的 SHA-256 hash值
 
         :param block: Block
         """
 
         # We must make sure that the Dictionary is Ordered, or we'll have inconsistent hashes
         block_string = json.dumps(block, sort_keys=True).encode()
         return hashlib.sha256(block_string).hexdigest()
 
     def proof_of_work(self, last_proof: int) -> int:
         """
         简单的工作量证明:
          - 查找一个 p' 使得 hash(pp') 以4个0开头
          - p 是上一个块的证明,  p' 是当前的证明
         """
 
         proof = 0
         while self.valid_proof(last_proof, proof) is False:
             proof += 1
 
         return proof
 
     @staticmethod
     def valid_proof(last_proof: int, proof: int) -> bool:
         """
-        验证证明
+        验证证明: 是否hash(last_proof, proof)以4个0开头
 
         :param last_proof: Previous Proof
         :param proof: Current Proof
         :return: True if correct, False if not.
         """
 
         guess = f'{last_proof}{proof}'.encode()
         guess_hash = hashlib.sha256(guess).hexdigest()
         return guess_hash[:4] == "0000"
 
 
 # Instantiate the Node
 app = Flask(__name__)
 
 # Generate a globally unique address for this node
 node_identifier = str(uuid4()).replace('-', '')
 
 # Instantiate the Blockchain
 blockchain = Blockchain()
 
 
 @app.route('/mine', methods=['GET'])
 def mine():
     # We run the proof of work algorithm to get the next proof...
     last_block = blockchain.last_block
     last_proof = last_block['proof']
     proof = blockchain.proof_of_work(last_proof)
 
     # 给工作量证明的节点提供奖励.
     # 发送者为 "0" 表明是新挖出的币
     blockchain.new_transaction(
         sender="0",
         recipient=node_identifier,
         amount=1,
     )
 
     # Forge the new Block by adding it to the chain
     block = blockchain.new_block(proof, None)
 
     response = {
         'message': "New Block Forged",
         'index': block['index'],
         'transactions': block['transactions'],
         'proof': block['proof'],
         'previous_hash': block['previous_hash'],
     }
     return jsonify(response), 200
 
 
 @app.route('/transactions/new', methods=['POST'])
 def new_transaction():
     values = request.get_json()
-    print(values)
 
-    # Check that the required fields are in the POST'ed data
+    # 检查POST数据
     required = ['sender', 'recipient', 'amount']
     if not all(k in values for k in required):
         return 'Missing values', 400
 
     # Create a new Transaction
     index = blockchain.new_transaction(values['sender'], values['recipient'], values['amount'])
 
     response = {'message': f'Transaction will be added to Block {index}'}
     return jsonify(response), 201
 
 
 @app.route('/chain', methods=['GET'])
 def full_chain():
     response = {
         'chain': blockchain.chain,
         'length': len(blockchain.chain),
     }
     return jsonify(response), 200
 
 
 @app.route('/nodes/register', methods=['POST'])
 def register_nodes():
     values = request.get_json()
 
     nodes = values.get('nodes')
     if nodes is None:
         return "Error: Please supply a valid list of nodes", 400
 
     for node in nodes:
         blockchain.register_node(node)
 
     response = {
         'message': 'New nodes have been added',
         'total_nodes': list(blockchain.nodes),
     }
     return jsonify(response), 201
 
 
 @app.route('/nodes/resolve', methods=['GET'])
 def consensus():
     replaced = blockchain.resolve_conflicts()
 
     if replaced:
         response = {
             'message': 'Our chain was replaced',
             'new_chain': blockchain.chain
         }
     else:
         response = {
             'message': 'Our chain is authoritative',
             'chain': blockchain.chain
         }
 
     return jsonify(response), 200
 
 
 if __name__ == '__main__':
     from argparse import ArgumentParser
 
     parser = ArgumentParser()
     parser.add_argument('-p', '--port', default=5000, type=int, help='port to listen on')
     args = parser.parse_args()
     port = args.port
 
     app.run(host='127.0.0.1', port=port)

